//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jig_system_control.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Jig_system_controlEntities : DbContext
    {
        public Jig_system_controlEntities()
            : base("name=Jig_system_controlEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Jig> Jig { get; set; }
        public virtual DbSet<JigDocument> JigDocument { get; set; }
        public virtual DbSet<JigDrawing> JigDrawing { get; set; }
        public virtual DbSet<JigMaintainChecklist> JigMaintainChecklist { get; set; }
        public virtual DbSet<JigMaintainHistory> JigMaintainHistory { get; set; }
        public virtual DbSet<JigPartList> JigPartList { get; set; }
        public virtual DbSet<JigRepairHistory> JigRepairHistory { get; set; }
        public virtual DbSet<JigRequest> JigRequest { get; set; }
        public virtual DbSet<MaintainItem> MaintainItem { get; set; }
        public virtual DbSet<MaintainSpareUsage> MaintainSpareUsage { get; set; }
        public virtual DbSet<RepairSpareUsage> RepairSpareUsage { get; set; }
        public virtual DbSet<UserAccount> UserAccount { get; set; }
        public virtual DbSet<SparePartApprovals> SparePartApprovals { get; set; }
        public virtual DbSet<SparePartReceiptDetails> SparePartReceiptDetails { get; set; }
        public virtual DbSet<SparePartReceipts> SparePartReceipts { get; set; }
        public virtual DbSet<SparePartRequests> SparePartRequests { get; set; }
        public virtual DbSet<SparePartStocks> SparePartStocks { get; set; }
        public virtual DbSet<SparePartTransactions> SparePartTransactions { get; set; }
        public virtual DbSet<SparePartUse> SparePartUse { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<vw_SparePart_PendingRequests> vw_SparePart_PendingRequests { get; set; }
        public virtual DbSet<vw_SparePart_WaitingRequestStatus> vw_SparePart_WaitingRequestStatus { get; set; }
    
        public virtual int sp_MatchImportFIFO(Nullable<int> spareID, Nullable<int> importQty, Nullable<int> transactionID)
        {
            var spareIDParameter = spareID.HasValue ?
                new ObjectParameter("SpareID", spareID) :
                new ObjectParameter("SpareID", typeof(int));
    
            var importQtyParameter = importQty.HasValue ?
                new ObjectParameter("ImportQty", importQty) :
                new ObjectParameter("ImportQty", typeof(int));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MatchImportFIFO", spareIDParameter, importQtyParameter, transactionIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_AutoDistributeReceipt(Nullable<int> spareID, Nullable<int> receivedQty, string createdBy)
        {
            var spareIDParameter = spareID.HasValue ?
                new ObjectParameter("SpareID", spareID) :
                new ObjectParameter("SpareID", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AutoDistributeReceipt", spareIDParameter, receivedQtyParameter, createdByParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
